name: Build Shellscribe

on:
  push:
    branches: [main]
    paths:
      - 'CMakeLists.txt'
      - '.github/workflows/build.yaml'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Shellscribe
    runs-on: ${{ matrix.os }}
    env:
      COMMITTER_NAME: ${{ secrets.COMMITTER_NAME }}
      COMMITTER_EMAIL: ${{ secrets.COMMITTER_EMAIL }}

    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: |
          version=$(grep -oP 'project\(shellscribe VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          echo "SHELLSCRIBE_VERSION=$version" >> $GITHUB_ENV
          echo "Detected version: $version"

      - name: Configure and build
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build build

      - name: Get short commit hash
        run: |
          short_hash=$(echo ${{ github.sha }} | cut -c1-7)
          echo "SHELLSCRIBE_SHORT_HASH=$short_hash" >> $GITHUB_ENV

      - name: Prepare artifacts
        id: prepare_artifacts
        run: |
          mkdir -p artifacts
          full_version="${{ env.SHELLSCRIBE_VERSION }}-1build1"
          package_name="shellscribe-${{ env.SHELLSCRIBE_SHORT_HASH }}_${{ env.SHELLSCRIBE_VERSION }}-1build1-${{ matrix.os }}_amd64.deb"
          echo "FULL_VERSION=$full_version" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$package_name" >> $GITHUB_OUTPUT

      - name: Build Debian Package
        run: |
          PKG_DIR="package_shellscribe"
          mkdir -p "$PKG_DIR/DEBIAN" "$PKG_DIR/usr/local/bin" "$PKG_DIR/etc/default/shellscribe"
          cp "build/scribe" "$PKG_DIR/usr/local/bin/"
          chmod +x "$PKG_DIR/usr/local/bin/scribe"
          cp -pR .scribeconf "$PKG_DIR/etc/default/shellscribe/.shellscribe"
          find $PKG_DIR -type f -exec file {} \; | grep ELF | cut -d: -f1 | xargs --no-run-if-empty strip --strip-unneeded
          installed_size=$(du -s -k "$PKG_DIR" | cut -f1)
          cat > "$PKG_DIR/DEBIAN/control" <<EOF
          Package: shellscribe
          Version: ${{ steps.prepare_artifacts.outputs.FULL_VERSION }}
          Architecture: amd64
          Maintainer: ${{ env.COMMITTER_NAME }} <${{ env.COMMITTER_EMAIL }}>
          Installed-Size: $installed_size
          Depends: libc6
          Section: devel
          Priority: optional
          Homepage: https://github.com/tomcdj71/shellscribe
          Description: Documentation generator for shell scripts
           Shellscribe extracts specially formatted comments from your bash 
           scripts and generates clear, structured, and professional
           documentation in Markdown format.
           .
           Features:
            * Generates elegant Markdown documentation
            * Extracts script metadata (author, version, license)
            * Supports documentation of functions, arguments, examples
            * Transforms GitHub usernames into profile links
            * Ignores shellcheck annotations
           .
           Compiled on $(date +%Y-%m-%d).
          EOF
          cd "$PKG_DIR"
          find usr -type f -exec md5sum {} \; > DEBIAN/md5sums
          cd ..
          dpkg-deb --build -Zxz -z9 -Sextreme "$PKG_DIR" "${{ steps.prepare_artifacts.outputs.PACKAGE_NAME }}"
          mv "${{ steps.prepare_artifacts.outputs.PACKAGE_NAME }}" artifacts/
          cp "build/scribe" "artifacts"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shellscribe-${{ steps.prepare_artifacts.outputs.FULL_VERSION }}-${{ matrix.os }}
          path: artifacts/

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    env:
      COMMITTER_NAME: ${{ secrets.COMMITTER_NAME }}
      COMMITTER_EMAIL: ${{ secrets.COMMITTER_EMAIL }}
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Version
        id: extract_version
        run: |
          version=$(grep -oP 'project\(shellscribe VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts

      - name: Create Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ env.COMMITTER_NAME }}"
          git config user.email "${{ env.COMMITTER_EMAIL }}"
          git tag v${{ steps.extract_version.outputs.version }}
          git push origin v${{ steps.extract_version.outputs.version }}

      - name: Prepare release assets
        run: |
          mkdir release_assets
          find downloaded_artifacts -type f -exec cp {} release_assets/ \;

      - name: Create GitHub Release with Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          generate_release_notes: true
          files: |
            release_assets/* 
